using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DevExpress.Mvvm;
using System.Threading;
using DevExpress.XtraBars.Navigation;
using DONGSHIN.WorkerMain;

namespace DONGSHIN
{
    public partial class frm_manager_home : Form
    {
        TileBarItem[] menuItems;
        UserControl[] menuContents;
        public frm_manager_home()
        {
            InitializeComponent();
            Thread.Sleep(500);

            commonFX.setThisLanguage(this);


        }

        #region  메뉴에 해당하는 컨트롤 생성
        ctl_empcode emp = new ctl_empcode();
        ctl_deptCode dept = new ctl_deptCode();
        ctl_dutyCode duty = new ctl_dutyCode();
        ctl_bizCode biz = new ctl_bizCode();
        ctl_commonCode common = new ctl_commonCode();
        ctl_machineCode machine = new ctl_machineCode();
        ctl_moldCode mold = new ctl_moldCode();
        ctl_productCode product = new ctl_productCode();
        ctl_resinCode resin = new ctl_resinCode();
        ctl_errorCode error = new ctl_errorCode();
        ctl_defectiveProductsCode defective = new ctl_defectiveProductsCode();
        ctl_nonOperationCode nonOP = new ctl_nonOperationCode();

        ctl_DBPermission permission = new ctl_DBPermission();

        ctl_workOrder order = new ctl_workOrder();
        ctl_workperformance perform = new ctl_workperformance();

        ctl_InjectionCondition injection = new ctl_InjectionCondition();

        ctl_ErrorStates errorState = new ctl_ErrorStates();
        ctl_Settings subUserSetting = new ctl_Settings();
        #endregion

        private Dictionary<TileBarItem, Control> menuControls = new Dictionary<TileBarItem, Control>();

        private void frm_manager_home_Load(object sender, EventArgs e)
        {
            menuSettingByUserID();

            lbl_user.Text = commonVar.login_name;

            menuControls.Add(menu_primarycode, emp);
            menuControls.Add(sub_empCode, emp);
            menuControls.Add(sub_deptCode, dept);
            menuControls.Add(sub_bizCode, biz);
            menuControls.Add(sub_duty, duty);
            menuControls.Add(sub_common, common);
            menuControls.Add(sub_machine, machine);
            menuControls.Add(sub_mold, mold);
            menuControls.Add(sub_product, product);
            menuControls.Add(sub_resinCode, resin);
            menuControls.Add(sub_errorCode, error);
            menuControls.Add(sub_defectiveProducts, defective);
            menuControls.Add(sub_nonOperation, nonOP);
            menuControls.Add(menu_system, permission);
            menuControls.Add(sub_permission, permission);
            menuControls.Add(sub_userSetting, subUserSetting);
            menuControls.Add(menu_manufacture, order);
            menuControls.Add(sub_workorder, order);
            menuControls.Add(sub_workperformance, perform);
            menuControls.Add(menu_conditionmanage, injection);
            menuControls.Add(sub_inejctCondition, injection);
            menuControls.Add(sub_errorBreak, errorState);


            menu_bar.ItemClick += new DevExpress.XtraEditors.TileItemClickEventHandler(menu_Click);
            sub_bar_primarycode.ItemClick += new DevExpress.XtraEditors.TileItemClickEventHandler(menu_Click);
            sub_bar_manufacture.ItemClick += new DevExpress.XtraEditors.TileItemClickEventHandler(menu_Click);
            sub_bar_system.ItemClick += new DevExpress.XtraEditors.TileItemClickEventHandler(menu_Click);
            sub_bar_state.ItemClick += new DevExpress.XtraEditors.TileItemClickEventHandler(menu_Click);

            menu_switch.ItemClick += (senderL, eL) =>
            {
                frm_worker_main worker = new frm_worker_main();
                Program.ac.MainForm = worker;
                worker.Show();
                this.Close();
            };

            menu_logout.ItemClick += (senderL, eL) =>
            {
                frm_login login = new frm_login();
                Program.ac.MainForm = login;
                login.Show();
                this.Close();
            };

        }



        
        #region 함수

        private void menuSettingByUserID()
        {
            //권한에 따라 메뉴 출력 설정

            List<TileBarItem> menuItems = new List<TileBarItem>();

            //상위메뉴
            foreach ( TileBarItem upperMenuItem in ((TileBarGroup)tileBarGroup1).Items )
                menuItems.Add(upperMenuItem);

            //기초코드의 하위메뉴
            foreach ( TileBarItem dropdownMenuItem1 in ((TileBarGroup)tileBarGroup2).Items )
                menuItems.Add(dropdownMenuItem1);

            //생산관리의 하위메뉴
            foreach ( TileBarItem dropdownMenuItem2 in ((TileBarGroup)tileBarGroup3).Items )
                menuItems.Add(dropdownMenuItem2);

            //현황정보의 하위메뉴
            foreach ( TileBarItem dropdownMenuItem3 in ((TileBarGroup)tileBarGroup4).Items )
                menuItems.Add(dropdownMenuItem3);

            //시스템의 하위메뉴
            foreach ( TileBarItem dropdownMenuItem4 in ((TileBarGroup)tileBarGroup5).Items )
                menuItems.Add(dropdownMenuItem4);

            commonReturn Return2 = new commonReturn();
            Return2 = fx_DBPermission.findByID(commonVar.DBconn, commonVar.login_id);

            if ( Return2.Message == "" )
            {
                commonVar.userPermissionInfo = Return2.Dataset.Tables[0];

                foreach ( TileBarItem items in menuItems )
                {
                    string menuID = "";

                    if ( items.Tag != null )
                        menuID = items.Tag.ToString();

                    if ( searchMenuTag(menuID) )
                        items.Visible = true;
                    else
                        items.Visible = false;
                }

                menu_switch.Visible = true;
                menu_logout.Visible = true;
            }
            else
            {
                foreach ( TileBarItem items in menuItems )
                {
                    items.Visible = false;
                }
                MessageBox.Show("권한 설정 읽어오기 실패", "에러");
            }

        }

        private bool searchMenuTag(string menuID)
        {
            for ( int i = 0 ; i < commonVar.userPermissionInfo.Rows.Count ; i++ )
            {
                DataRow target = commonVar.userPermissionInfo.Rows[i];
                if ( (target["child_id"].ToString() == menuID) || (target["parent_id"].ToString() == menuID) )
                    return true;
            }

            return false;
        }

        void setSelect(Control ctl)
        {
            if ( ctl.Visible == false )
                ctl.Visible = true;
            ctl.Parent = pan_container;
            ctl.Dock = DockStyle.Fill;
            ctl.BringToFront();
        }

        #endregion


        #region 메뉴 클릭 이벤트 관련 함수

        private void menu_Click(object sender, DevExpress.XtraEditors.TileItemEventArgs e)
        {
                if ( transitionManager.IsTransition )
                    transitionManager.EndTransition();

                transitionManager.StartTransition(pan_container);
            
                try
                {
                    TileBarItem item = e.Item as TileBarItem;
                    if(item != null && menuControls.ContainsKey(item))
                        setSelect(menuControls[item]);
                }
                finally { transitionManager.EndTransition(); }

                menu_bar.HideDropDownWindow();

        }

        
        #endregion


    }//클래스
}//네임스페이스
