using ModbusTcp;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Net;
using System.Windows.Forms;
using System.Xml;


namespace DONGSHIN
{
    static class Program
    {
        public static ApplicationContext ac = new ApplicationContext();

        /// <summary>
        /// 해당 응용 프로그램의 주 진입점입니다.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            #region AppInfo.xml 데이터 읽어오는 과정
            string fileName = "";
            string appVersion = "";
            string appAddress = "";

            fileName = Application.StartupPath + "\\AppInfo.xml";

            XmlDocument xDoc = new XmlDocument();

            try
            {
                xDoc.Load(fileName);

                XmlNodeList nodeList = xDoc.GetElementsByTagName("AppInfo");
                appVersion = nodeList[0]["version"].InnerText;

                commonVar.version = appVersion;

                XmlNodeList nodeList2 = xDoc.GetElementsByTagName("ServerInfo");
                appAddress = nodeList2[0]["addr"].InnerText;
            }
            catch { }
            #endregion

            try
            {//독립형 모델인지 확인
                if (Settings.SettingHelper.IsStandAlone())
                {
                    //인증 정보확인
                    if (Settings.SettingHelper.ReadSetting("Authentication").ToLower().Equals("true") == false)
                    {
                        FormAuthentication_StandAlone f = new FormAuthentication_StandAlone();
                        f.ShowDialog();
                        if (f.Certified == false)
                            return;
                    }
                    initializeSetting();
                }
                else
                {
                    if (Settings.SettingHelper.ReadSetting("Authentication").ToLower().Equals("true") == false)
                    {
                        FormAuthentication f = new FormAuthentication();
                        f.ShowDialog();
                        if (f.Certified == false)
                            return;
                    }
                    string companyCode = Settings.SettingHelper.ReadSetting("CompanyCode");
                    Console.WriteLine("load : " + companyCode);
                    initializeSetting(companyCode);
                }

                //로그 생성 경로 지정
                string localFilePath = Settings.SettingHelper.ReadSetting("LocalFilePath");
                commonVar.LocalFilePath = localFilePath.Length > 0 ? localFilePath : Application.StartupPath;
                LogWriter.FileBasePath = commonVar.LocalFilePath;

                frm_login login = new frm_login();
                ac.MainForm = login;
                Application.Run(ac);     
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            

        }

        static void initializeSetting()
        {
            commonVar.CompanyName = Settings.SettingHelper.ReadSetting("CompanyName");
            commonVar.IsThisServer = true;
           
            string serverName = Settings.SettingHelper.ReadSetting("SqlAddress");
            string dbName = Settings.SettingHelper.ReadSetting("DbName");
            string id = Settings.SettingHelper.ReadSetting("DbId");
            string pw = Settings.SettingHelper.ReadSetting("DbPw");

            commonVar.setDbConString(serverName, dbName, id, pw);
        }

        static void initializeSetting(string companyCode)
        {
            try
            {
                commonVar.CompanyCode = companyCode;

                DataTable companyTable = MethodMain.LoadCompanyInfo(companyCode);
                if (companyTable.Rows.Count > 0)
                {
                    commonVar.CompanyName = companyTable.Rows[0]["COMPANY_NAME"].ToString();

                    commonVar.ServerPublicIpAddress = companyTable.Rows[0]["PUBLIC_IP"].ToString();
                    commonVar.ServerPublicPort = (int)companyTable.Rows[0]["PUBLIC_PORT"];
                    commonVar.ServerPrivateIpAddress = companyTable.Rows[0]["PRIVATE_IP"].ToString();
                    commonVar.ServerPrivatePort = (int)companyTable.Rows[0]["PRIVATE_PORT"];

                    string serverPrivateIp = companyTable.Rows[0]["PRIVATE_IP"].ToString();
                    string thisPrivateIp = string.Empty;

                    IPAddress[] addresses = Dns.GetHostAddresses(Dns.GetHostName());
                    foreach (IPAddress addr in addresses)
                    {
                        if (addr.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                            thisPrivateIp = addr.ToString();
                    }

                    if (serverPrivateIp == thisPrivateIp)
                        commonVar.IsThisServer = true;
                    else
                        commonVar.IsThisServer = false;


                    string serverName = companyTable.Rows[0]["SQL_SERVERNAME"].ToString();
                    string dbName = companyTable.Rows[0]["SQL_DBNAME"].ToString();
                    string id = companyTable.Rows[0]["SQL_ID"].ToString();
                    string pw = companyTable.Rows[0]["SQL_PW"].ToString();

                    commonVar.setDbConString(serverName, dbName, id, pw);
                }
                else
                    throw new Exception("서버 정보 읽기가 실패하였습니다");

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
    }
}
